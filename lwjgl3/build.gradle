buildscript {
	repositories {
		gradlePluginPortal()
	}
	dependencies {
		if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_14)) {
			classpath "org.beryx:badass-runtime-plugin:1.12.7"
		}
	}
}
if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_14)) {
	apply plugin: 'org.beryx.runtime'
}
else {
	apply plugin: 'application'
}

sourceSets.main.resources.srcDirs += [ rootProject.file('assets').path ]
mainClassName = 'com.ray3k.flexbox.lwjgl3.ChallengeComic'
eclipse.project.name = appName + '-lwjgl3'
sourceCompatibility = 1.8

dependencies {
	implementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
	implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
	api "com.github.lyze237:gdx-FlexBox:ada82dae27"
	api 'com.github.raeleus.TenPatch:tenpatch:5.2.3'
}

def os = System.properties['os.name'].toLowerCase()

run {
	workingDir = rootProject.file('assets').path
	setIgnoreExitValue(true)

	if (os.contains('mac')) {
		jvmArgs += "-XstartOnFirstThread"
	}
}

jar {
	archiveBaseName.set(appName)
	destinationDirectory = file("$project.buildDir/lib")
	duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
	dependsOn configurations.runtimeClasspath
	from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
	exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
	dependencies {
		exclude('META-INF/INDEX.LIST', 'META-INF/maven/**')
	}
	manifest {
		attributes 'Main-Class': project.mainClassName
	}
	doLast {
		file(archiveFile).setExecutable(true, false)
	}
}

if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_14)) {
    jpackageImage.dependsOn jar

    runtime {
        options.set(['--strip-debug',
                     '--compress', '2',
                     '--no-header-files',
                     '--no-man-pages',
                     '--strip-native-commands',
                     '--vm', 'server'])
        modules.set([
                'jdk.unsupported'
        ])
        distDir.set(file(buildDir))
        jpackage {
            imageName = appName
            skipInstaller = true
            jpackageHome = javaHome.getOrElse("")
            mainJar = jar.archiveFileName.get()
            if (os.contains('win')) {
                imageOptions = ["--icon", "icons/logo.ico"]
            } else if (os.contains('nix') || os.contains('nux') || os.contains('bsd')) {
                imageOptions = ["--icon", "icons/logo.png"]
            } else if (os.contains('mac')) {
                imageOptions = ["--icon", "icons/logo.icns", "--java-options", "\"-XstartOnFirstThread\""]
            }
        }
    }
}

task dist(dependsOn: [jar]) {
}
